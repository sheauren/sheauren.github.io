* hello world example
    * header
        * #!/bin/sh
        * #!/bin/bash
        * #!/bin/env python
    * command        
        * <<COMMENT
        * this is comment 1
        * this is comment 2
        * COMMENT
    * print
        * echo "hello world"
* execute shell
    * execute sh by sheel
        * bash helloworld.sh
        * sh helloworld.sh
    * execute sh by it self
        * chmod +x helloworld.sh
            * ./helloworld.sh
    * execute by not subroutie 
        * pstree : show routine relationship            
        * source helloworld.sh
        * . helloworld.sh
        * by subroute vs not by subroute
            * bash helloworld.sh
            * source helloworld.sh
* input/output
    * echo : output
        * support escape \b,\f,\n,\r,\t,\\,\033(\e)
            * echo -e "hello\tworld"
            * echo -e "\033[1mOK\033[0m"
                * \033[1m = bold
                * \033[0m = normal
                * \e[1m]    * bold
                * \e[4m]    * underline
                * \e[5m]    * blink
                * \e[30m]   * black
                * \e[31m]   * red
                * \e[32m]   * green
                * \e[33m]   * brown
                * \e[34m]   * blue
                * \e[35m]   * purple
                * \e[36m]   * cyan
                * \e[37m]   * white
                * \e[1;33m] * yellow
                * \e[42m]   * green background
                * \e[44m]   * blue background
                * \e[32;44m] * green font+blue background
    * printf : format output
        * printf "%-5d" 12
            * %5d = digital 5 space width
            * -5d = align left
        * %d , %i
        * %o
        * %u
        * %f
            * %.3f
            * %-8.3f
        * %s
        * \b,\f,\n,\r,\t
    * input : read input
        * -p : show hint
            * read -p "please input username" user                
        * -t : read duration time
            * read -t 3 -p "please input name in 3sec" user
        * -n : read n chars
            * read -n1 -p "press any key" key
        * -r : support \ , default \ is special char
            * read -r adaccount
                * support read slash
        * -s : slient mode (hidden input chars)
            * read -s -p "please input password" pass
        * example:
            * read key1 key2 key3
                * echo $key1                
    * pipeline
        * useradd "$user"
        * echo "$pass" | passwd --stdin "$user"
        * who | wc -l
        * ss -nutlp | grep ssh
* input/output redirect
    * output redirect
        * replace redirect
            * echo "hello world" > text.txt
        * append redirect
            * echo "hello world" >> text.txt
        * stderr redirect 2> or 2>>
            * ls -l /oops 2> text.txt
            * ls -l /oops 2>> text.txt
        * redirect stdout/stderr in same time
            * ls -l /etc/hosts /nofile > ok.txt 2> error.txt
        * redirect stdout/stderr in same pipline
            * ls -l /etc/hosts /nofile &> log.txt
        * redirect stdout to stderr
            * echo "hello" 1>&2
        * redirect stderr to stdout
            * ls /nofile 2>&1
        * /dev/null black hole
    * input redirect
        * mail -s warning root@localhosts < /etc/hosts
        * << here document
            * << EOF  multiple lines data EOF
                * EOF can rename you perfer keyword
            * mail -s warning root@localhost << EOF xxxxxxx EOF
            * << EOF xxxx EOF can handle interaction command
            * <<- will skip [tab] in EOF & here document
    * quotes
        * ': single quote
            * disable special char's function
        * ": double quote
        * `: reverse qutoe
            * command replace by output value where in `` command
            * doesn't support nest replace
            * tar -czf /root/log-`date +%Y%m%d`.tar.gz /var/log/
            * kill `cat /var/run/atd.pid`
            * tar -czf x.tar.gz `ls /etc/*.conf`                
        * \: slash
        * #: comment
            * echo # need use single qutoe
        * $xxx: get variable
            * xxx=1
            * echo $xxx
                * disable get variable
                    * \$xxx
                    * '$xxx'
        * &: run background
        * ~: user's root directory
        * $() : support nest command replace
            * ping -c2 $(hostname)
            * touch $(date +%Y%m%d).txt
            * echo $(echo i'm level 1,$(echo i'm level 2))
* varibles name
    * [a-zA-Z\_][a-zA-Z0-9\_]+
    * (O)filename
    * (X)file-name 
    * set value
        * xxxx=123
    * echo ${xxxx}\$
    * unset value
        * unset xxxx
    * system variables
        * UID : account
        * USER : username
        * HISTSIZE : terminal history limit
        * HOME : users' root directory
        * LANG : environment language
        * PATH : command search path
        * PWD : current work directory
        * RANDOM : generate ranodm number 0~32767
        * $0 : curent command name                
        * $n
            * $1 $2 $3 = parameters 
        * $# : command parameters numbers
        * $* : get all parameters to a string
        * $@ : get all parameters to a array
        * $? : get pervious command result status (0:success,!=0:fail)
        * $$ : get current process id
        * $! : get last backgorund process id
* data filter & regex
    * grep
        * -i : igrnoe case sensitive
        * -v : get not match
        * -w : match word
        * -q : slience match
        * support regex match
            * grep ":..0:" /tmp/password
        * special regex
            * {m,n} : appear m~n times
        * posfix regex
            * [:alpha:] : alphabet
                * grep "[[:alpha:]]"
            * [:alnum:] : alphabet + numberic
            * [:graph:] : non space characters
            * [:print:] : visible characters
            * [:space:] : all space characters
            * [:cntrl:] : control characters
            * [:digit:] : numberic characters
            * [:xdigit:] : hexadecimal characters
            * [:punct:] : symbol characters
            * [:blank:] : space & tab
            * [:lower:] : all lower case characters
            * [:upper:] : all upper case characters
* operator
    * ++,--,+,-,*,/,**,%,+=,-=,*=,/=,%=,&&,||,>,>=,<,<=,?:
    * let: operator with no $ prefix's variable
        * let x+5
        * does support decimal point
    * bc: calculator
        * interaction mode
            * bc
        * non-interaction mode
            * x=$(echo "(1+2)*3"|bc)
        * change positional notation
            * obase
                echo "obase=16;10"|bc
            * ibase
                echo "ibase=2;11"|bc