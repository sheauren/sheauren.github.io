feature
    Delightful Javascript Testing        
install
    npm install --save-dev jest
    npm install --save-dev sinon
        Standalone test spies, stubs and mocks for JavaScript
    yarn add --dev jest
example
    basic example
        sum.js
            sum.test.js
                test sum.js
                    test('adds 1+2 to equal 3'),()=>{
                        expect(sum(1,2)).toBe(3)
                    }
        package.json
            scripts
                "test":"jest"
                "test":"jest --converge"
    test react
        npm install --save-dev jest babel-jest babel-preset-es2015 babel-preset-react react-test-renderer
        .babelrc
            "presets":["es2015","react"]
        DOM test
            npm install --save-dev enzyme
        test code
            import React from 'react'
            import {shallow} from 'enzyme'
            import CheckboxWithLabel from '../CheckboxWithLabel'
            test('CheckboxWithLabel change the text after click',()=>{
                const checkbox = shallow(
                    <CheckboxWithLabel labelOn='On' labelOff='Off'/>
                )
                expect(checkbox.text()).toEqual('Off')
                checkbox.find('input').simulate('change')
                expect(checkbox.text()).toEqual('On')
            })
        watch DOM test
            import {shallow} from 'enzyme'
        full DOM test
            import {mount} from 'enzyme'
            import sinon from 'sinon'
            import {expect} from 'chai'
            import React from 'react'
            describe('<Foo/>',()=>{
                it('allow us to set props',()=>{
                    const wrapper = mount('<Foo bar="bar"/>')
                    wrapper.setProps({bar:'foo'})
                    expect(wrapper.props().bar).to.equal('foo')
                })
                it('simulate click event',()=>{
                    const onButtonClick = sinon.spy()
                    const wrapper = mount({
                        <Foo onButtonClick={onButtonClick}/>
                    })
                    wrapper.find('button').simulate('click')
                    expect(onButtonClick).to.have.property('callCount',1)
                })
                it('call componentDidMount',()=>{
                    sinon.spy(Foo.prototype,'componentDidMount')
                    const wrapper = mount(<Foo/>)
                    expect(Foo.prototype.componentDidMount).to.have.property('callCount',1)
                    Foo.prototype.componentDidMount.restore()
                })
            })
        static renderer test
            import {renderer} from 'enzyme'